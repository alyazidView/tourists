---
title: "Tourist - Airbnb Canada Quebec"
format: revealjs
jupyter: python3
author: 
- Rehab Alaswad
- Rawan Aljohani
- Alyazid Alhumaydani
- Ibrahim Alghrabi
---

```{python}
# Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels as sm 
import plotly.express as px
import plotly.io as pio
from matplotlib import colors
import folium
import folium.plugins
import branca.colormap as cmp
from math import radians, cos, sin, asin, sqrt
sns.set_style('darkgrid')
pio.templates.default = 'seaborn'
df = pd.read_csv('../data/canada/listings.csv')
```


## Introduction{background="#43464B"}
In this report, we will study the Airbnb Canada dataset and try to make recommendation of a listing to an investor based on how close the listing is to nature. 

## About the Dataset{background="#43464B"}
The dataset was obtained from Inside Airbnb, and it provides data and advocacy about Airbnb's impact on resdential communities. Inside Airbnb provides data for many countries but we chose Canda becuase of great nature in Canada.

## Our Scenario{background="#43464B"}
To study the Airbnb hospitality market for an investor interested in purchasing or building a property in one of the tourist towns near great nature. 

## Notable Variables:{background="#43464B" .smaller}
| *Variable* | *Description*|
|:---------|:---------:|
|id | Airbnb's unique identifier for the listing.|
|host_id|Airbnb's unique identifier for the host.|
|neighbourhood| Name of the neighbourhood. |
|latitude | Uses the World Geodetic System (WGS84)|
|longitude | Uses the World Geodetic System (WGS84)|
|room_type | Type of the listing; entire house, private room, or shared room.|
|price| Price of the listing in Canadian dollars.|
|minimum_nights| Number of minimum stays in the listing.|
|last_review|The date of the last review.|
|license| The license/permit/registration number.|

```{python}
df[(df['minimum_nights'] > 11000) | (df['price'] > 100000)]
print(f"The number of observation with price greater than 4000$ is: {df[df['price'] >= 4000].count()['id']}")
df = df[df['minimum_nights']< 11000]
df = df[df['price'] < 4000]
```

# Data Cleaning {background="#43464B" .smaller}

## Dataset Sample {background="#43464B" .smaller}
```{python}
df.sample(3)
```

## Data Info{background="#43464B" .smaller}
```{python}
df.info()
```
- Dropping NaN variables
```{.python}
df.drop('neighbourhood_group', axis =1, inplace=True)
df.drop('license',axis =1, inplace=True)
```

## Data Types. {background="#43464B" .smaller}
```{python}
df.dtypes
```
- Modification:
```{.python}
df['id'] = df['id'].astype(str)
df['host_id'] = df['host_id'].astype(str)
print(f"id column type: {df.id.dtypes}")
print(f"id_host column type: {df.host_id.dtypes}")
```
## Extreme Values{background="#43464B" .smaller}
- Minimum Nights
```{python}
df.minimum_nights.describe()
```
- Prices
```{python}
df.price.describe()
```

## Distinct neighbourhoods in the datasets:{background="#43464B"}
```{python}
print(f"Number of distinct neighbourhood: {df['neighbourhood'].nunique()}")
print('  |  '.join(df.neighbourhood.unique()))
```

## Supporting Dataset:{background="#43464B" .smaller}

```{python}
df3 = pd.read_csv('../data/canada/lieux_d_interet.csv') #load the data
df3.dropna(how='any', inplace=True) #drop any missing value
df3 = df3[df3['Type'].isin(["Parc", "Jardin communautaire"])] #pick only places of interest related parks
df3 #only 4 parks
```



- New Variables
-- nearest_park: the nearest park.
-- distance_to_nearest_park: distance of the closet park in km.

```{python}
obs  = list(zip(df3['Latitude'], df3['Longitude']))
def cal_dist1(temp):
    lat1 = temp['latitude'] 
    lon1 = temp['longitude']
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    results= []
    for i in range(len(obs)):
        lon2 = radians(obs[i][1])
        lat2 = radians(obs[i][0])
        # Haversine formula
        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
        c = 2 * asin(sqrt(a))
        # Radius of earth in kilometers. Use 3956 for miles
        r = 6371
        # calculate the result
        results.append(c * r * 1.609344)
    
    min_val = min(results)
    if min_val == results[0]:
        return [min_val, "Park 1"]
    elif min_val == results[1]:
        return [min_val, "Park 2"]
    elif min_val == results[2]:
        return [min_val, "Park 3"]
    elif min_val == results[3]:
        return [min_val, "Park 4"]
    else:
        return [0,"0"]

df['distance_to_parks'] = df.apply(cal_dist1, axis=1)
df[['distance_to_nearest_park', 'nearest_park',]] = pd.DataFrame(df.distance_to_parks.tolist(), index=df.index)
df.drop('distance_to_parks', axis=1,inplace=True)
```


# EDA:{background="#43464B" .smaller}

## Price Distribution:{background="#43464B" .smaller}
We would like the distribution of price, where the distribution is located and how much is the spread.
```{python}
fig = px.histogram(
    df, 
    x='price', 
    template= 'ggplot2',
    title="Price Histogram",
    labels={
        'count': 'Count', #this doesnt work 
        'price': 'Price ($)'}
    )

fig.update_layout(yaxis_title='Count')
fig.show()  
```


## Minimum Nights Distributions:{background="#43464B" .smaller}
Let's have a look at the distribution of minimum nights of the listings, showing only up to minimum of 180 nights:
```{python}
fig = px.histogram(
    df[df['minimum_nights'] <=181],
    x='minimum_nights',
    labels={
        'count': 'Count',
        'minimum_nights': 'Minimum Nights '
    },
    title='Minimum Nights Histogram',
    template='ggplot2'
    )
fig.update_layout(yaxis_title='Count')
fig.show()
```



## Listing and Parks Locations on Map:{background="#43464B" .smaller}
We would like how the listing is distributed on the map, and where the location of the parks in the area.
```{python}
#center the map around montreal
map_osm = folium.Map(location=[df['latitude'].mean() , df['longitude'].mean()] , zoom_start=10)
temp = df
#adding a title
title_html = '''
             <h3 align="center" style="font-size:20px"><b>Concetration of listing and park locations.</b></h3>
             '''
map_osm.get_root().html.add_child(folium.Element(title_html))
#make the listing location as list
location = list(zip(df.latitude, df.longitude))
folium.plugins.HeatMap(location, min_opacity = 0.09, max_opacity=0.5).add_to(map_osm)

#make the park's location as list
obs = list(zip(df3['Latitude'], df3['Longitude']))
park_list = ['Park 1', "Park 2", "Park 3", 'Park 4']

for i , el in enumerate(obs):
    #folium.CircleMarker(el[0:2], radius=15, color='#000000', fill_color='#000000').add_to(map_osm)
    folium.Marker(el, popup=park_list[i], icon=folium.Icon(icon='tree', prefix= 'fa', color='green')).add_to(map_osm)
#FastMarkerCluster(data=obs).add_to(map_osm)

map_osm
```


## Nearest Parks and Distance to Nearest Parks:{background="#43464B" .smaller}

Lets have a look at the new columns descriptive statistic (1/2):
```{python}
print(df.distance_to_nearest_park.describe())

```
## Nearest Parks and Distance to Nearest Parks:{background="#43464B" .smaller}
```{python}
fig = px.histogram(
    df,
    x='distance_to_nearest_park',
    labels={'distance_to_nearest_park': 'Distance to nearest park (km)'},
    title='Distance to nearest park distribution.',
    template='ggplot2'
)
fig.update_layout(yaxis_title='Count')
fig.show()
```


## Lets see what park is close to most listing {background="#43464B" .smaller}
```{python}
fig = px.bar(
    df,
    x = df.nearest_park.unique(),
    y = df.nearest_park.value_counts(),
    title= "Number of Listing Near the Parks",
    labels={
        'y': 'Number of Listing',
        'x': 'Park'
    },
    template='ggplot2'
)
fig.show()
```


## Mean distance by neighbourhood.{background="#43464B" .smaller}


```{python}
df_neig_dis = df.groupby(['neighbourhood']).agg({'distance_to_nearest_park': ['mean','std','count']})
df_neig_dis_sorted = df_neig_dis.distance_to_nearest_park.sort_values('mean').head(6)
df_neig_dis_sorted = pd.DataFrame(df_neig_dis_sorted)
df_neig_dis_sorted.index

fig = px.bar(
    df_neig_dis_sorted,
    x = df_neig_dis_sorted.index,
    y = 'mean',
    color = 'count',
    title= "Mean distance of nearest park organized by neighbourhood.",
    labels={
        'mean': 'Mean distance of nearest park (km)',
        'neighbourhood': 'Neighourhoods'
    }
)
fig.show()
```



## Conclusion {background="#43464B" .smaller}

In conclusion, we use two datasets acquired from both the Inside Airbnb, and canada goverment website. We were able to analyzed the data available. Since the investor want the listing close to parks, we would recommend investing on listing from the following neighbourhoods: 

1) Le Plateau-Mont-Royal
2) Ville-Marie
3) Mercier-Hochelaga-Maisonneuve

## Sources {background="#43464B" .smaller}

- Supplying [dataset](https://open.canada.ca/data/en/dataset/763fe3b8-cdc3-4b8a-bbbd-a0a9bc587c56)
- [Distance calculation code](https://www.geeksforgeeks.org/program-distance-two-points-earth/
)